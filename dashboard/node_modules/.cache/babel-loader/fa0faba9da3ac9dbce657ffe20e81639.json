{"ast":null,"code":"var _jsxFileName = \"/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/src/components/ListView.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { weatherData } from '../actions';\n\nclass ListView extends Component {\n  componentDidUpdate(prevState) {\n    // if (prevState !== this.props.weather) {\n    //   this.props.weatherData();\n    // }\n    console.log(this.props.weather);\n    console.log(prevState); // console.log(new Date(this.props.weather.data.currently.time * 1000));\n  }\n\n  componentDidMount() {\n    this.props.weatherData();\n  }\n\n  decimalToPercent(decimal) {\n    return ` ${Math.round(decimal * 100)}%`;\n  } //Unix to Day/Date Converter\n\n\n  unixToDay(unixTime) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n    return unixTimeConverter;\n  } // Unix To Standard Time Converter\n\n\n  unixToStandardConverter(unixTime) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' '); // Extract Time From unixTimeConverter variable\n\n    let militaryTime = unixTimeConverter[4].split(':'); // Remove the 0s from the end of the military time\n\n    let militaryTimeShortened = `${militaryTime[0]}:${militaryTime[1]}`; // 1. Check if the time is a.m. or p.m.\n    // 2. If a.m., return `military time + a.m`\n    // 3. If p.m., return `(military time - 12) + p.m.`\n\n    if (Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) === 0) {\n      return `12:${militaryTimeShortened[3]}${militaryTimeShortened[4]} am`;\n    } else if (Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) < 12) {\n      return `${militaryTimeShortened} am`;\n    } else {\n      let standardTime = Number(militaryTimeShortened[0] + militaryTimeShortened[1]) - 12;\n      standardTime = `${standardTime}:${militaryTimeShortened[3]}${militaryTimeShortened[4]}`;\n      return `${standardTime} pm`;\n    }\n  } // renderInput() {\n  //   if (this.props.weather.length === 0) {\n  //     return <div>Hi there</div>;\n  //   }\n  //   return (\n  //     <div>\n  //       <h3>Today: {this.unixToDay(this.props.weather.data.currently.time)}</h3>\n  //       <h3>Location: {this.props.locationName}</h3>\n  //       <h3>\n  //         Temperature:\n  //         {Math.round(this.props.weather.data.currently.temperature)}\n  //       </h3>\n  //       <h3>\n  //         Feels Like: {this.props.weather.data.currently.apparentTemperature}\n  //       </h3>\n  //       <h3>\n  //         Sunset Time:\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.daily.data[0].sunsetTime\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         Precipitation Probability:\n  //         {this.props.weather.data.currently.precipProbability}\n  //       </h3>\n  //       <h3>-------------------</h3>\n  //       <h2>Chance of rain</h2>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[2].time\n  //         )}\n  //         :{' '}\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[2].precipProbability\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[4].time\n  //         )}\n  //         :\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[4].precipProbability\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[6].time\n  //         )}\n  //         :\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[6].precipProbability\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[8].time\n  //         )}\n  //         :\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[8].precipProbability\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[10].time\n  //         )}\n  //         :\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[10].precipProbability\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[12].time\n  //         )}\n  //         :\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[12].precipProbability\n  //         )}\n  //       </h3>\n  //     </div>\n  //   );\n  // }\n\n\n  tryNewRender() {\n    if (this.props.weather.length === 0) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"Hi there\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, \"Loading...\");\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"ui container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, this.tryNewRender());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchedItem: state.searchPhrase,\n    weather: state.weather,\n    locationName: state.clickedSearch\n  };\n};\n\nexport default connect(mapStateToProps, {\n  weatherData\n})(ListView);","map":{"version":3,"sources":["/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/src/components/ListView.js"],"names":["React","Component","connect","weatherData","ListView","componentDidUpdate","prevState","console","log","props","weather","componentDidMount","decimalToPercent","decimal","Math","round","unixToDay","unixTime","unixTimeConverter","Date","toString","split","unixToStandardConverter","militaryTime","militaryTimeShortened","Number","standardTime","tryNewRender","length","render","mapStateToProps","state","searchedItem","searchPhrase","locationName","clickedSearch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAC/BI,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,OAAvB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAL4B,CAO5B;AACD;;AAEDK,EAAAA,iBAAiB,GAAG;AAClB,SAAKF,KAAL,CAAWN,WAAX;AACD;;AAEDS,EAAAA,gBAAgB,CAACC,OAAD,EAAU;AACxB,WAAQ,IAAGC,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,GAArB,CAA0B,GAArC;AACD,GAjB8B,CAmB/B;;;AACAG,EAAAA,SAAS,CAACC,QAAD,EAAW;AAClB;AACA,QAAIC,iBAAiB,GAAG,IAAIC,IAAJ,CAASF,QAAQ,GAAG,IAApB,EAA0BG,QAA1B,GAAqCC,KAArC,CAA2C,GAA3C,CAAxB;AAEA,WAAOH,iBAAP;AACD,GAzB8B,CA2B/B;;;AACAI,EAAAA,uBAAuB,CAACL,QAAD,EAAW;AAChC;AACA,QAAIC,iBAAiB,GAAG,IAAIC,IAAJ,CAASF,QAAQ,GAAG,IAApB,EAA0BG,QAA1B,GAAqCC,KAArC,CAA2C,GAA3C,CAAxB,CAFgC,CAIhC;;AACA,QAAIE,YAAY,GAAGL,iBAAiB,CAAC,CAAD,CAAjB,CAAqBG,KAArB,CAA2B,GAA3B,CAAnB,CALgC,CAOhC;;AACA,QAAIG,qBAAqB,GAAI,GAAED,YAAY,CAAC,CAAD,CAAI,IAAGA,YAAY,CAAC,CAAD,CAAI,EAAlE,CARgC,CAUhC;AACA;AACA;;AAEA,QACEE,MAAM,CAAE,GAAED,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,EAAxD,CAAN,KAAqE,CADvE,EAEE;AACA,aAAQ,MAAKA,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,KAAjE;AACD,KAJD,MAIO,IACLC,MAAM,CAAE,GAAED,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,EAAxD,CAAN,GAAmE,EAD9D,EAEL;AACA,aAAQ,GAAEA,qBAAsB,KAAhC;AACD,KAJM,MAIA;AACL,UAAIE,YAAY,GACdD,MAAM,CAACD,qBAAqB,CAAC,CAAD,CAArB,GAA2BA,qBAAqB,CAAC,CAAD,CAAjD,CAAN,GAA8D,EADhE;AAGAE,MAAAA,YAAY,GAAI,GAAEA,YAAa,IAAGF,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,EAAtF;AACA,aAAQ,GAAEE,YAAa,KAAvB;AACD;AACF,GAzD8B,CA2D/B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,EAAAA,YAAY,GAAG;AACb,QAAI,KAAKlB,KAAL,CAAWC,OAAX,CAAmBkB,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+B,KAAKF,YAAL,EAA/B,CAAP;AACD;;AA5J8B;;AA+JjC,MAAMG,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLC,IAAAA,YAAY,EAAED,KAAK,CAACE,YADf;AAELvB,IAAAA,OAAO,EAAEqB,KAAK,CAACrB,OAFV;AAGLwB,IAAAA,YAAY,EAAEH,KAAK,CAACI;AAHf,GAAP;AAKD,CAND;;AAQA,eAAejC,OAAO,CAAC4B,eAAD,EAAkB;AAAE3B,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,QAA1C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { weatherData } from '../actions';\n\nclass ListView extends Component {\n  componentDidUpdate(prevState) {\n    // if (prevState !== this.props.weather) {\n    //   this.props.weatherData();\n    // }\n    console.log(this.props.weather);\n    console.log(prevState);\n\n    // console.log(new Date(this.props.weather.data.currently.time * 1000));\n  }\n\n  componentDidMount() {\n    this.props.weatherData();\n  }\n\n  decimalToPercent(decimal) {\n    return ` ${Math.round(decimal * 100)}%`;\n  }\n\n  //Unix to Day/Date Converter\n  unixToDay(unixTime) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n\n    return unixTimeConverter;\n  }\n\n  // Unix To Standard Time Converter\n  unixToStandardConverter(unixTime) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n\n    // Extract Time From unixTimeConverter variable\n    let militaryTime = unixTimeConverter[4].split(':');\n\n    // Remove the 0s from the end of the military time\n    let militaryTimeShortened = `${militaryTime[0]}:${militaryTime[1]}`;\n\n    // 1. Check if the time is a.m. or p.m.\n    // 2. If a.m., return `military time + a.m`\n    // 3. If p.m., return `(military time - 12) + p.m.`\n\n    if (\n      Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) === 0\n    ) {\n      return `12:${militaryTimeShortened[3]}${militaryTimeShortened[4]} am`;\n    } else if (\n      Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) < 12\n    ) {\n      return `${militaryTimeShortened} am`;\n    } else {\n      let standardTime =\n        Number(militaryTimeShortened[0] + militaryTimeShortened[1]) - 12;\n\n      standardTime = `${standardTime}:${militaryTimeShortened[3]}${militaryTimeShortened[4]}`;\n      return `${standardTime} pm`;\n    }\n  }\n\n  // renderInput() {\n  //   if (this.props.weather.length === 0) {\n  //     return <div>Hi there</div>;\n  //   }\n\n  //   return (\n  //     <div>\n  //       <h3>Today: {this.unixToDay(this.props.weather.data.currently.time)}</h3>\n  //       <h3>Location: {this.props.locationName}</h3>\n  //       <h3>\n  //         Temperature:\n  //         {Math.round(this.props.weather.data.currently.temperature)}\n  //       </h3>\n  //       <h3>\n  //         Feels Like: {this.props.weather.data.currently.apparentTemperature}\n  //       </h3>\n  //       <h3>\n  //         Sunset Time:\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.daily.data[0].sunsetTime\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         Precipitation Probability:\n  //         {this.props.weather.data.currently.precipProbability}\n  //       </h3>\n  //       <h3>-------------------</h3>\n\n  //       <h2>Chance of rain</h2>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[2].time\n  //         )}\n  //         :{' '}\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[2].precipProbability\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[4].time\n  //         )}\n  //         :\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[4].precipProbability\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[6].time\n  //         )}\n  //         :\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[6].precipProbability\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[8].time\n  //         )}\n  //         :\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[8].precipProbability\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[10].time\n  //         )}\n  //         :\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[10].precipProbability\n  //         )}\n  //       </h3>\n  //       <h3>\n  //         {this.unixToStandardConverter(\n  //           this.props.weather.data.hourly.data[12].time\n  //         )}\n  //         :\n  //         {this.decimalToPercent(\n  //           this.props.weather.data.hourly.data[12].precipProbability\n  //         )}\n  //       </h3>\n  //     </div>\n  //   );\n  // }\n\n  tryNewRender() {\n    if (this.props.weather.length === 0) {\n      return <div>Hi there</div>;\n    }\n\n    return <div>Loading...</div>;\n  }\n\n  render() {\n    return <div className=\"ui container\">{this.tryNewRender()}</div>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchedItem: state.searchPhrase,\n    weather: state.weather,\n    locationName: state.clickedSearch\n  };\n};\n\nexport default connect(mapStateToProps, { weatherData })(ListView);\n"]},"metadata":{},"sourceType":"module"}