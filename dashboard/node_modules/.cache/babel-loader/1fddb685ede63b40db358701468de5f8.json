{"ast":null,"code":"var _jsxFileName = \"/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/src/components/Searchbar.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { searchPhrase } from '../actions/index';\nimport { connect } from 'react-redux';\nimport placesAutocomplete from '../apis/placesAutocomplete';\n\nclass SearchBar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (error && touched) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 11\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 12\n          },\n          __self: this\n        }, error));\n      }\n    };\n\n    this.renderButtonColor = ({\n      error,\n      touched\n    }) => {\n      if (error && touched) {\n        return React.createElement(\"button\", {\n          className: \"ui button red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, \"Search\");\n      }\n\n      return React.createElement(\"button\", {\n        className: \"ui button green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, \"Search\");\n    };\n\n    this.autoComplete = async input => {\n      console.log(input.value);\n      const searchTerm = await placesAutocomplete.get(`/json?`, {\n        params: {\n          input: input.value\n        }\n      });\n    };\n\n    this.renderInput = ({\n      label,\n      input,\n      meta\n    }) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        onChange: this.autoComplete(input),\n        className: \"ui fluid action input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })), this.renderButtonColor(meta)), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, label), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.searchPhrase(formValues.searchFieldSubmission);\n      this.props.reset();\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"searchFieldSubmission\",\n      label: \"Zipcode | City Search\",\n      component: this.renderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst validate = formValues => {\n  const error = {};\n\n  if (!formValues.searchFieldSubmission) {\n    error.searchFieldSubmission = 'Please enter a zipcode or city';\n  }\n\n  return error;\n};\n\nconst formWrapped = reduxForm({\n  form: 'submittedSearch',\n  validate\n})(SearchBar);\nexport default connect(null, {\n  searchPhrase\n})(formWrapped);","map":{"version":3,"sources":["/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/src/components/Searchbar.js"],"names":["React","Component","Field","reduxForm","searchPhrase","connect","placesAutocomplete","SearchBar","renderError","error","touched","renderButtonColor","autoComplete","input","console","log","value","searchTerm","get","params","renderInput","label","meta","onSubmit","formValues","props","searchFieldSubmission","reset","render","handleSubmit","validate","formWrapped","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { searchPhrase } from '../actions/index';\nimport { connect } from 'react-redux';\nimport placesAutocomplete from '../apis/placesAutocomplete';\n\nclass SearchBar extends Component {\n  renderError = ({ error, touched }) => {\n    if (error && touched) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  };\n\n  renderButtonColor = ({ error, touched }) => {\n    if (error && touched) {\n      return <button className=\"ui button red\">Search</button>;\n    }\n\n    return <button className=\"ui button green\">Search</button>;\n  };\n\n  autoComplete = async input => {\n    console.log(input.value);\n    const searchTerm = await placesAutocomplete.get(`/json?`, {\n      params: {\n        input: input.value\n      }\n    });\n  };\n\n  renderInput = ({ label, input, meta }) => {\n    return (\n      <div>\n        <div\n          onChange={this.autoComplete(input)}\n          className=\"ui fluid action input\"\n        >\n          <input {...input} autoComplete=\"off\" />\n          {this.renderButtonColor(meta)}\n        </div>\n        <label>{label}</label>\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  onSubmit = formValues => {\n    this.props.searchPhrase(formValues.searchFieldSubmission);\n    this.props.reset();\n  };\n\n  render() {\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"ui container\"\n      >\n        <Field\n          name=\"searchFieldSubmission\"\n          label=\"Zipcode | City Search\"\n          component={this.renderInput}\n        />\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const error = {};\n\n  if (!formValues.searchFieldSubmission) {\n    error.searchFieldSubmission = 'Please enter a zipcode or city';\n  }\n\n  return error;\n};\n\nconst formWrapped = reduxForm({\n  form: 'submittedSearch',\n  validate\n})(SearchBar);\n\nexport default connect(null, { searchPhrase })(formWrapped);\n"]},"metadata":{},"sourceType":"module"}