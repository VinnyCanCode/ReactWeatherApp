{"ast":null,"code":"var _jsxFileName = \"/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/src/components/ListView.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { weatherData } from '../actions';\n\nclass ListView extends Component {\n  componentDidUpdate(prevState) {\n    if (this.props.weather === prevState.weather) {\n      this.props.weatherData();\n      console.log(this.props);\n    }\n  }\n\n  decimalToPercent(decimal) {\n    return ` ${Math.round(decimal * 100)}%`;\n  } //Unix to Day/Date Converter\n\n\n  unixToDay(unixTime) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n    return unixTimeConverter;\n  } // Unix To Standard Time Converter\n\n\n  unixToStandardConverter(unixTime) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' '); // Extract Time From unixTimeConverter variable\n\n    let militaryTime = unixTimeConverter[4].split(':'); // Remove the 0s from the end of the military time\n\n    let militaryTimeShortened = `${militaryTime[0]}:${militaryTime[1]}`; // 1. Check if the time is a.m. or p.m.\n    // 2. If a.m., return `military time + a.m`\n    // 3. If p.m., return `(military time - 12) + p.m.`\n\n    if (Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) === 0) {\n      return `12:${militaryTimeShortened[3]}${militaryTimeShortened[4]} am`;\n    } else if (Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) < 12) {\n      return `${militaryTimeShortened} am`;\n    } else {\n      let standardTime = Number(militaryTimeShortened[0] + militaryTimeShortened[1]) - 12;\n      standardTime = `${standardTime}:${militaryTimeShortened[3]}${militaryTimeShortened[4]}`;\n      return `${standardTime} pm`;\n    }\n  }\n\n  renderInput() {\n    if (!this.props.weather) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Hi there\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Gi t\"));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"ui container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, this.renderInput());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchedItem: state.searchPhrase,\n    weather: state.weather,\n    locationName: state.clickedSearch\n  };\n};\n\nexport default connect(mapStateToProps, {\n  weatherData\n})(ListView);","map":{"version":3,"sources":["/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/src/components/ListView.js"],"names":["React","Component","connect","weatherData","ListView","componentDidUpdate","prevState","props","weather","console","log","decimalToPercent","decimal","Math","round","unixToDay","unixTime","unixTimeConverter","Date","toString","split","unixToStandardConverter","militaryTime","militaryTimeShortened","Number","standardTime","renderInput","render","mapStateToProps","state","searchedItem","searchPhrase","locationName","clickedSearch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { weatherData } from '../actions';\n\nclass ListView extends Component {\n  componentDidUpdate(prevState) {\n    if (this.props.weather === prevState.weather) {\n      this.props.weatherData();\n      console.log(this.props);\n    }\n  }\n\n  decimalToPercent(decimal) {\n    return ` ${Math.round(decimal * 100)}%`;\n  }\n\n  //Unix to Day/Date Converter\n  unixToDay(unixTime) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n\n    return unixTimeConverter;\n  }\n\n  // Unix To Standard Time Converter\n  unixToStandardConverter(unixTime) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n\n    // Extract Time From unixTimeConverter variable\n    let militaryTime = unixTimeConverter[4].split(':');\n\n    // Remove the 0s from the end of the military time\n    let militaryTimeShortened = `${militaryTime[0]}:${militaryTime[1]}`;\n\n    // 1. Check if the time is a.m. or p.m.\n    // 2. If a.m., return `military time + a.m`\n    // 3. If p.m., return `(military time - 12) + p.m.`\n\n    if (\n      Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) === 0\n    ) {\n      return `12:${militaryTimeShortened[3]}${militaryTimeShortened[4]} am`;\n    } else if (\n      Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) < 12\n    ) {\n      return `${militaryTimeShortened} am`;\n    } else {\n      let standardTime =\n        Number(militaryTimeShortened[0] + militaryTimeShortened[1]) - 12;\n\n      standardTime = `${standardTime}:${militaryTimeShortened[3]}${militaryTimeShortened[4]}`;\n      return `${standardTime} pm`;\n    }\n  }\n\n  renderInput() {\n    if (!this.props.weather) {\n      return <div>Hi there</div>;\n    }\n\n    return (\n      <div>\n        <h3>Gi t</h3>\n      </div>\n    );\n  }\n\n  render() {\n    return <div className=\"ui container\">{this.renderInput()}</div>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchedItem: state.searchPhrase,\n    weather: state.weather,\n    locationName: state.clickedSearch\n  };\n};\n\nexport default connect(mapStateToProps, { weatherData })(ListView);\n"]},"metadata":{},"sourceType":"module"}