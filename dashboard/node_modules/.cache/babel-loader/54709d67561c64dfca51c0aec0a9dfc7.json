{"ast":null,"code":"var _jsxFileName = \"/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/dashboard/src/components/HighlightedCities.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchHighlightedCity, searchPhrase } from '../actions';\n\nclass HighlightedCities extends Component {\n  componentDidMount() {\n    this.props.fetchHighlightedCity();\n  }\n\n  renderRandomCities() {\n    if (!this.props.highlightedCities) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, \"Loading...\");\n    } // For each page refresh, render random cities from db list\n\n\n    let randomCities = []; // Render three random Cities\n\n    for (let i = 0; randomCities.length < 3; i++) {\n      // If the randomCities array is empty, push a new city info into array\n      if (randomCities.length === 0) {\n        let randomNumber = Math.floor(Math.random() * 39);\n        randomCities.push(this.props.highlightedCities[randomNumber]);\n        i++;\n      } // If randomCities array isn't empty, make sure that we are not pushing a city already in said array\n\n\n      if (randomCities.length > 0) {\n        let randomNumber = Math.floor(Math.random() * 39);\n\n        if (randomCities.every(city => city === randomCities[randomNumber])) {\n          continue;\n        }\n\n        randomCities.push(this.props.highlightedCities[randomNumber]);\n        console.log(randomCities);\n        i++;\n      }\n    } // map through array and return JSX\n\n\n    return randomCities.map(city => React.createElement(\"div\", {\n      className: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ui fluid card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      style: {\n        height: '300px',\n        width: '100%'\n      },\n      src: city.picture,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      className: \"content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"a\", {\n      onClick: () => this.propss.searchPhrase('Philadelphia, PA, USA'),\n      className: \"header\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, city.cityName))), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    })));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"ui four column grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, this.renderRandomCities());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    highlightedCities: state.fetchCities\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchHighlightedCity,\n  searchPhrase\n})(HighlightedCities);","map":{"version":3,"sources":["/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/dashboard/src/components/HighlightedCities.js"],"names":["React","Component","connect","fetchHighlightedCity","searchPhrase","HighlightedCities","componentDidMount","props","renderRandomCities","highlightedCities","randomCities","i","length","randomNumber","Math","floor","random","push","every","city","console","log","map","height","width","picture","textAlign","propss","cityName","render","mapStateToProps","state","fetchCities"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchHighlightedCity, searchPhrase } from '../actions';\n\nclass HighlightedCities extends Component {\n  componentDidMount() {\n    this.props.fetchHighlightedCity();\n  }\n\n  renderRandomCities() {\n    if (!this.props.highlightedCities) {\n      return <div>Loading...</div>;\n    }\n\n    // For each page refresh, render random cities from db list\n    let randomCities = [];\n\n    // Render three random Cities\n    for (let i = 0; randomCities.length < 3; i++) {\n      // If the randomCities array is empty, push a new city info into array\n      if (randomCities.length === 0) {\n        let randomNumber = Math.floor(Math.random() * 39);\n        randomCities.push(this.props.highlightedCities[randomNumber]);\n        i++;\n      }\n\n      // If randomCities array isn't empty, make sure that we are not pushing a city already in said array\n      if (randomCities.length > 0) {\n        let randomNumber = Math.floor(Math.random() * 39);\n        if (randomCities.every(city => city === randomCities[randomNumber])) {\n          continue;\n        }\n        randomCities.push(this.props.highlightedCities[randomNumber]);\n        console.log(randomCities);\n        i++;\n      }\n    }\n\n    // map through array and return JSX\n    return randomCities.map(city => (\n      <div className=\"column\">\n        <div className=\"ui fluid card\">\n          <div className=\"image\">\n            <img\n              style={{\n                height: '300px',\n                width: '100%'\n              }}\n              src={city.picture}\n            />\n          </div>\n          <div style={{ textAlign: 'center' }} className=\"content\">\n            <a\n              onClick={() => this.propss.searchPhrase('Philadelphia, PA, USA')}\n              className=\"header\"\n            >\n              {city.cityName}\n            </a>\n          </div>\n        </div>\n        <br />\n        <br />\n      </div>\n    ));\n  }\n\n  render() {\n    return (\n      <div className=\"ui four column grid\">{this.renderRandomCities()}</div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return { highlightedCities: state.fetchCities };\n};\n\nexport default connect(mapStateToProps, {\n  fetchHighlightedCity,\n  searchPhrase\n})(HighlightedCities);\n"]},"metadata":{},"sourceType":"module"}