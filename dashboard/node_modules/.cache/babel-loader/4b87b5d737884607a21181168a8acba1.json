{"ast":null,"code":"import _slicedToArray from \"/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { SUBMITTED_SEARCH, GET_WEATHERDATA, CLICKED_SEARCH } from './types';\nimport mapBox, { accessToken } from '../apis/mapBox';\nimport darkSky from '../apis/darkSky'; // import darkSky from '../apis/darkSky';\n\nexport const clickedSearch = searchTerm => {\n  return {\n    type: CLICKED_SEARCH,\n    payload: searchTerm\n  };\n}; // Searcg Phrase turned into geolocation (lat, long)\n\nexport const searchPhrase = submittedSearch => async dispatch => {\n  const response = await mapBox.get(`/${submittedSearch}.json?access_token=${accessToken}`);\n  dispatch({\n    type: SUBMITTED_SEARCH,\n    payload: response.data.features[0].geometry.coordinates\n  });\n}; // Get all of the weather data from darksky api\n\nexport const weatherData = (exclude = 'alerts, flags') => async (dispatch, getState) => {\n  const _getState$searchPhras = _slicedToArray(getState().searchPhrase, 2),\n        lat = _getState$searchPhras[0],\n        long = _getState$searchPhras[1];\n\n  const response = await darkSky.get(`14087dfbaafa09516688998dfadf5c73/${lat},${long}?exclude=${exclude}`);\n  dispatch({\n    type: GET_WEATHERDATA,\n    payload: response\n  });\n};","map":{"version":3,"sources":["/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/src/actions/index.js"],"names":["SUBMITTED_SEARCH","GET_WEATHERDATA","CLICKED_SEARCH","mapBox","accessToken","darkSky","clickedSearch","searchTerm","type","payload","searchPhrase","submittedSearch","dispatch","response","get","data","features","geometry","coordinates","weatherData","exclude","getState","lat","long"],"mappings":";AAAA,SAASA,gBAAT,EAA2BC,eAA3B,EAA4CC,cAA5C,QAAkE,SAAlE;AACA,OAAOC,MAAP,IAAiBC,WAAjB,QAAoC,gBAApC;AACA,OAAOC,OAAP,MAAoB,iBAApB,C,CACA;;AAEA,OAAO,MAAMC,aAAa,GAAGC,UAAU,IAAI;AACzC,SAAO;AAAEC,IAAAA,IAAI,EAAEN,cAAR;AAAwBO,IAAAA,OAAO,EAAEF;AAAjC,GAAP;AACD,CAFM,C,CAIP;;AAEA,OAAO,MAAMG,YAAY,GAAGC,eAAe,IAAI,MAAMC,QAAN,IAAkB;AAC/D,QAAMC,QAAQ,GAAG,MAAMV,MAAM,CAACW,GAAP,CACpB,IAAGH,eAAgB,sBAAqBP,WAAY,EADhC,CAAvB;AAIAQ,EAAAA,QAAQ,CAAC;AACPJ,IAAAA,IAAI,EAAER,gBADC;AAEPS,IAAAA,OAAO,EAAEI,QAAQ,CAACE,IAAT,CAAcC,QAAd,CAAuB,CAAvB,EAA0BC,QAA1B,CAAmCC;AAFrC,GAAD,CAAR;AAID,CATM,C,CAWP;;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,OAAO,GAAG,eAAX,KAA+B,OACxDR,QADwD,EAExDS,QAFwD,KAGrD;AAAA,+CACiBA,QAAQ,GAAGX,YAD5B;AAAA,QACIY,GADJ;AAAA,QACSC,IADT;;AAGH,QAAMV,QAAQ,GAAG,MAAMR,OAAO,CAACS,GAAR,CACpB,oCAAmCQ,GAAI,IAAGC,IAAK,YAAWH,OAAQ,EAD9C,CAAvB;AAIAR,EAAAA,QAAQ,CAAC;AAAEJ,IAAAA,IAAI,EAAEP,eAAR;AAAyBQ,IAAAA,OAAO,EAAEI;AAAlC,GAAD,CAAR;AACD,CAXM","sourcesContent":["import { SUBMITTED_SEARCH, GET_WEATHERDATA, CLICKED_SEARCH } from './types';\nimport mapBox, { accessToken } from '../apis/mapBox';\nimport darkSky from '../apis/darkSky';\n// import darkSky from '../apis/darkSky';\n\nexport const clickedSearch = searchTerm => {\n  return { type: CLICKED_SEARCH, payload: searchTerm };\n};\n\n// Searcg Phrase turned into geolocation (lat, long)\n\nexport const searchPhrase = submittedSearch => async dispatch => {\n  const response = await mapBox.get(\n    `/${submittedSearch}.json?access_token=${accessToken}`\n  );\n\n  dispatch({\n    type: SUBMITTED_SEARCH,\n    payload: response.data.features[0].geometry.coordinates\n  });\n};\n\n// Get all of the weather data from darksky api\n\nexport const weatherData = (exclude = 'alerts, flags') => async (\n  dispatch,\n  getState\n) => {\n  const [lat, long] = getState().searchPhrase;\n\n  const response = await darkSky.get(\n    `14087dfbaafa09516688998dfadf5c73/${lat},${long}?exclude=${exclude}`\n  );\n\n  dispatch({ type: GET_WEATHERDATA, payload: response });\n};\n"]},"metadata":{},"sourceType":"module"}