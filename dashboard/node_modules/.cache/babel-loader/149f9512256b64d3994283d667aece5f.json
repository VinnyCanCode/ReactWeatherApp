{"ast":null,"code":"export const decimalToPercent = decimal => {\n  return ` ${Math.round(decimal * 100)}%`;\n}; //Unix to Day/Date Converter\n\nexport const unixToDay = (unixTime, typeOfReturn) => {\n  // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n  let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n\n  if (typeOfReturn === 'Date') {\n    return `${unixTimeConverter[0]}, ${unixTimeConverter[2]} ${unixTimeConverter[1]}`;\n  } else if (typeOfReturn === 'Day') {\n    switch (unixTimeConverter[0]) {\n      case 'Sun':\n        return 'Sunday';\n\n      case 'Mon':\n        return 'Monday';\n\n      case 'Tue':\n        return 'Tuesday';\n\n      case 'Wed':\n        return 'Wednesday';\n\n      case 'Thu':\n        return 'Thursday';\n\n      case 'Fri':\n        return 'Friday';\n\n      case 'Sat':\n        return 'Saturday';\n\n      default:\n        return '';\n    }\n  }\n}; // Unix To Standard Time Converter\n\nexport const unixToStandardConverter = unixTime => {\n  // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n  let unixTimeConverter = new Date(unixTime * 1000).toString().split(' '); // Extract Time From unixTimeConverter variable\n\n  let militaryTime = unixTimeConverter[4].split(':'); // Remove the 0s from the end of the military time\n\n  let militaryTimeShortened = `${militaryTime[0]}:${militaryTime[1]}`; // 1. Check if the time is a.m. or p.m.\n  // 2. If a.m., return `military time + a.m`\n  // 3. If p.m., return `(military time - 12) + p.m.`\n\n  if (Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) === 0) {\n    return `12:${militaryTimeShortened[3]}${militaryTimeShortened[4]} am`;\n  } else if (Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) < 12) {\n    return `${militaryTimeShortened} am`;\n  } else {\n    let standardTime = Number(militaryTimeShortened[0] + militaryTimeShortened[1]) - 12;\n    standardTime = `${standardTime}:${militaryTimeShortened[3]}${militaryTimeShortened[4]}`;\n    return `${standardTime} pm`;\n  }\n};","map":{"version":3,"sources":["/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/dashboard/src/components/Util.js"],"names":["decimalToPercent","decimal","Math","round","unixToDay","unixTime","typeOfReturn","unixTimeConverter","Date","toString","split","unixToStandardConverter","militaryTime","militaryTimeShortened","Number","standardTime"],"mappings":"AAAA,OAAO,MAAMA,gBAAgB,GAAGC,OAAO,IAAI;AACzC,SAAQ,IAAGC,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,GAArB,CAA0B,GAArC;AACD,CAFM,C,CAIP;;AACA,OAAO,MAAMG,SAAS,GAAG,CAACC,QAAD,EAAWC,YAAX,KAA4B;AACnD;AACA,MAAIC,iBAAiB,GAAG,IAAIC,IAAJ,CAASH,QAAQ,GAAG,IAApB,EAA0BI,QAA1B,GAAqCC,KAArC,CAA2C,GAA3C,CAAxB;;AAEA,MAAIJ,YAAY,KAAK,MAArB,EAA6B;AAC3B,WAAQ,GAAEC,iBAAiB,CAAC,CAAD,CAAI,KAAIA,iBAAiB,CAAC,CAAD,CAAI,IAAGA,iBAAiB,CAAC,CAAD,CAAI,EAAhF;AACD,GAFD,MAEO,IAAID,YAAY,KAAK,KAArB,EAA4B;AACjC,YAAQC,iBAAiB,CAAC,CAAD,CAAzB;AACE,WAAK,KAAL;AACE,eAAO,QAAP;;AACF,WAAK,KAAL;AACE,eAAO,QAAP;;AACF,WAAK,KAAL;AACE,eAAO,SAAP;;AACF,WAAK,KAAL;AACE,eAAO,WAAP;;AACF,WAAK,KAAL;AACE,eAAO,UAAP;;AACF,WAAK,KAAL;AACE,eAAO,QAAP;;AACF,WAAK,KAAL;AACE,eAAO,UAAP;;AACF;AACE,eAAO,EAAP;AAhBJ;AAkBD;AACF,CA1BM,C,CA4BP;;AACA,OAAO,MAAMI,uBAAuB,GAAGN,QAAQ,IAAI;AACjD;AACA,MAAIE,iBAAiB,GAAG,IAAIC,IAAJ,CAASH,QAAQ,GAAG,IAApB,EAA0BI,QAA1B,GAAqCC,KAArC,CAA2C,GAA3C,CAAxB,CAFiD,CAIjD;;AACA,MAAIE,YAAY,GAAGL,iBAAiB,CAAC,CAAD,CAAjB,CAAqBG,KAArB,CAA2B,GAA3B,CAAnB,CALiD,CAOjD;;AACA,MAAIG,qBAAqB,GAAI,GAAED,YAAY,CAAC,CAAD,CAAI,IAAGA,YAAY,CAAC,CAAD,CAAI,EAAlE,CARiD,CAUjD;AACA;AACA;;AAEA,MAAIE,MAAM,CAAE,GAAED,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,EAAxD,CAAN,KAAqE,CAAzE,EAA4E;AAC1E,WAAQ,MAAKA,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,KAAjE;AACD,GAFD,MAEO,IACLC,MAAM,CAAE,GAAED,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,EAAxD,CAAN,GAAmE,EAD9D,EAEL;AACA,WAAQ,GAAEA,qBAAsB,KAAhC;AACD,GAJM,MAIA;AACL,QAAIE,YAAY,GACdD,MAAM,CAACD,qBAAqB,CAAC,CAAD,CAArB,GAA2BA,qBAAqB,CAAC,CAAD,CAAjD,CAAN,GAA8D,EADhE;AAGAE,IAAAA,YAAY,GAAI,GAAEA,YAAa,IAAGF,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,EAAtF;AACA,WAAQ,GAAEE,YAAa,KAAvB;AACD;AACF,CA3BM","sourcesContent":["export const decimalToPercent = decimal => {\n  return ` ${Math.round(decimal * 100)}%`;\n};\n\n//Unix to Day/Date Converter\nexport const unixToDay = (unixTime, typeOfReturn) => {\n  // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n  let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n\n  if (typeOfReturn === 'Date') {\n    return `${unixTimeConverter[0]}, ${unixTimeConverter[2]} ${unixTimeConverter[1]}`;\n  } else if (typeOfReturn === 'Day') {\n    switch (unixTimeConverter[0]) {\n      case 'Sun':\n        return 'Sunday';\n      case 'Mon':\n        return 'Monday';\n      case 'Tue':\n        return 'Tuesday';\n      case 'Wed':\n        return 'Wednesday';\n      case 'Thu':\n        return 'Thursday';\n      case 'Fri':\n        return 'Friday';\n      case 'Sat':\n        return 'Saturday';\n      default:\n        return '';\n    }\n  }\n};\n\n// Unix To Standard Time Converter\nexport const unixToStandardConverter = unixTime => {\n  // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n  let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n\n  // Extract Time From unixTimeConverter variable\n  let militaryTime = unixTimeConverter[4].split(':');\n\n  // Remove the 0s from the end of the military time\n  let militaryTimeShortened = `${militaryTime[0]}:${militaryTime[1]}`;\n\n  // 1. Check if the time is a.m. or p.m.\n  // 2. If a.m., return `military time + a.m`\n  // 3. If p.m., return `(military time - 12) + p.m.`\n\n  if (Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) === 0) {\n    return `12:${militaryTimeShortened[3]}${militaryTimeShortened[4]} am`;\n  } else if (\n    Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) < 12\n  ) {\n    return `${militaryTimeShortened} am`;\n  } else {\n    let standardTime =\n      Number(militaryTimeShortened[0] + militaryTimeShortened[1]) - 12;\n\n    standardTime = `${standardTime}:${militaryTimeShortened[3]}${militaryTimeShortened[4]}`;\n    return `${standardTime} pm`;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}