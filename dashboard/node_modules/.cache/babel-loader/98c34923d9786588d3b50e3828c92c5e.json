{"ast":null,"code":"var _jsxFileName = \"/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/src/components/ListView.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { weatherData } from '../actions';\nimport { svg } from '../SVG';\n\nclass ListView extends Component {\n  componentDidUpdate(prevState) {\n    if (this.props.searchedItem.length !== 0) {\n      if (this.props.weather === prevState.weather) {\n        this.props.weatherData();\n      }\n    }\n  }\n\n  decimalToPercent(decimal) {\n    return ` ${Math.round(decimal * 100)}%`;\n  } //Unix to Day/Date Converter\n\n\n  unixToDay(unixTime, typeOfReturn) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n\n    if (typeOfReturn === 'Date') {\n      return `${unixTimeConverter[0]}, ${unixTimeConverter[2]} ${unixTimeConverter[1]}`;\n    } else if (typeOfReturn === 'Day') {\n      switch (unixTimeConverter[0]) {\n        case 'Sun':\n          return 'Sunday';\n\n        case 'Mon':\n          return 'Monday';\n\n        case 'Tues':\n          return 'Tuesday';\n\n        case 'Wed':\n          return 'Wednesday';\n\n        case 'Thurs':\n          return 'Thursday';\n\n        case 'Fri':\n          return 'Friday';\n\n        case 'Sat':\n          return 'Saturday';\n\n        default:\n          return '';\n      }\n    }\n  } // Unix To Standard Time Converter\n\n\n  unixToStandardConverter(unixTime) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' '); // Extract Time From unixTimeConverter variable\n\n    let militaryTime = unixTimeConverter[4].split(':'); // Remove the 0s from the end of the military time\n\n    let militaryTimeShortened = `${militaryTime[0]}:${militaryTime[1]}`; // 1. Check if the time is a.m. or p.m.\n    // 2. If a.m., return `military time + a.m`\n    // 3. If p.m., return `(military time - 12) + p.m.`\n\n    if (Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) === 0) {\n      return `12:${militaryTimeShortened[3]}${militaryTimeShortened[4]} am`;\n    } else if (Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) < 12) {\n      return `${militaryTimeShortened} am`;\n    } else {\n      let standardTime = Number(militaryTimeShortened[0] + militaryTimeShortened[1]) - 12;\n      standardTime = `${standardTime}:${militaryTimeShortened[3]}${militaryTimeShortened[4]}`;\n      return `${standardTime} pm`;\n    }\n  }\n\n  renderInput() {\n    if (Object.keys(this.props.weather).length === 0) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Hi there\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Today:\", ' ', this.unixToDay(this.props.weather.data.currently.time, 'Date')), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Location: \", this.props.locationName), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Temperature:\", ' ', Math.round(this.props.weather.data.currently.temperature), \"\\xB0 F\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Icon:\", ' ', React.createElement(\"img\", {\n      src: `../SVG/${this.props.weather.data.currently.icon}`,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    })), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Feels Like\", ' ', Math.round(this.props.weather.data.currently.apparentTemperature)), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Sunset Time:\", ' ', this.unixToStandardConverter(this.props.weather.data.daily.data[0].sunsetTime)), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"-------------------\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Chance of rain\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, this.unixToStandardConverter(this.props.weather.data.hourly.data[2].time), \":\", ' ', this.decimalToPercent(this.props.weather.data.hourly.data[2].precipProbability)), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, this.unixToStandardConverter(this.props.weather.data.hourly.data[4].time), \":\", this.decimalToPercent(this.props.weather.data.hourly.data[4].precipProbability)), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, this.unixToStandardConverter(this.props.weather.data.hourly.data[6].time), \":\", this.decimalToPercent(this.props.weather.data.hourly.data[6].precipProbability)), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, this.unixToStandardConverter(this.props.weather.data.hourly.data[8].time), \":\", this.decimalToPercent(this.props.weather.data.hourly.data[8].precipProbability)), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, this.unixToStandardConverter(this.props.weather.data.hourly.data[10].time), \":\", this.decimalToPercent(this.props.weather.data.hourly.data[10].precipProbability)), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.unixToStandardConverter(this.props.weather.data.hourly.data[12].time), \":\", this.decimalToPercent(this.props.weather.data.hourly.data[12].precipProbability)));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"ui container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, this.renderInput());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchedItem: state.searchPhrase,\n    weather: state.weather,\n    locationName: state.clickedSearch\n  };\n};\n\nexport default connect(mapStateToProps, {\n  weatherData\n})(ListView);","map":{"version":3,"sources":["/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/src/components/ListView.js"],"names":["React","Component","connect","weatherData","svg","ListView","componentDidUpdate","prevState","props","searchedItem","length","weather","decimalToPercent","decimal","Math","round","unixToDay","unixTime","typeOfReturn","unixTimeConverter","Date","toString","split","unixToStandardConverter","militaryTime","militaryTimeShortened","Number","standardTime","renderInput","Object","keys","data","currently","time","locationName","temperature","icon","apparentTemperature","daily","sunsetTime","hourly","precipProbability","render","mapStateToProps","state","searchPhrase","clickedSearch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,GAAT,QAAoB,QAApB;;AAEA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAC/BK,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,KAAKC,KAAL,CAAWC,YAAX,CAAwBC,MAAxB,KAAmC,CAAvC,EAA0C;AACxC,UAAI,KAAKF,KAAL,CAAWG,OAAX,KAAuBJ,SAAS,CAACI,OAArC,EAA8C;AAC5C,aAAKH,KAAL,CAAWL,WAAX;AACD;AACF;AACF;;AAEDS,EAAAA,gBAAgB,CAACC,OAAD,EAAU;AACxB,WAAQ,IAAGC,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,GAArB,CAA0B,GAArC;AACD,GAX8B,CAa/B;;;AACAG,EAAAA,SAAS,CAACC,QAAD,EAAWC,YAAX,EAAyB;AAChC;AACA,QAAIC,iBAAiB,GAAG,IAAIC,IAAJ,CAASH,QAAQ,GAAG,IAApB,EAA0BI,QAA1B,GAAqCC,KAArC,CAA2C,GAA3C,CAAxB;;AAEA,QAAIJ,YAAY,KAAK,MAArB,EAA6B;AAC3B,aAAQ,GAAEC,iBAAiB,CAAC,CAAD,CAAI,KAAIA,iBAAiB,CAAC,CAAD,CAAI,IAAGA,iBAAiB,CAAC,CAAD,CAAI,EAAhF;AACD,KAFD,MAEO,IAAID,YAAY,KAAK,KAArB,EAA4B;AACjC,cAAQC,iBAAiB,CAAC,CAAD,CAAzB;AACE,aAAK,KAAL;AACE,iBAAO,QAAP;;AACF,aAAK,KAAL;AACE,iBAAO,QAAP;;AACF,aAAK,MAAL;AACE,iBAAO,SAAP;;AACF,aAAK,KAAL;AACE,iBAAO,WAAP;;AACF,aAAK,OAAL;AACE,iBAAO,UAAP;;AACF,aAAK,KAAL;AACE,iBAAO,QAAP;;AACF,aAAK,KAAL;AACE,iBAAO,UAAP;;AACF;AACE,iBAAO,EAAP;AAhBJ;AAkBD;AACF,GAxC8B,CA0C/B;;;AACAI,EAAAA,uBAAuB,CAACN,QAAD,EAAW;AAChC;AACA,QAAIE,iBAAiB,GAAG,IAAIC,IAAJ,CAASH,QAAQ,GAAG,IAApB,EAA0BI,QAA1B,GAAqCC,KAArC,CAA2C,GAA3C,CAAxB,CAFgC,CAIhC;;AACA,QAAIE,YAAY,GAAGL,iBAAiB,CAAC,CAAD,CAAjB,CAAqBG,KAArB,CAA2B,GAA3B,CAAnB,CALgC,CAOhC;;AACA,QAAIG,qBAAqB,GAAI,GAAED,YAAY,CAAC,CAAD,CAAI,IAAGA,YAAY,CAAC,CAAD,CAAI,EAAlE,CARgC,CAUhC;AACA;AACA;;AAEA,QACEE,MAAM,CAAE,GAAED,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,EAAxD,CAAN,KAAqE,CADvE,EAEE;AACA,aAAQ,MAAKA,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,KAAjE;AACD,KAJD,MAIO,IACLC,MAAM,CAAE,GAAED,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,EAAxD,CAAN,GAAmE,EAD9D,EAEL;AACA,aAAQ,GAAEA,qBAAsB,KAAhC;AACD,KAJM,MAIA;AACL,UAAIE,YAAY,GACdD,MAAM,CAACD,qBAAqB,CAAC,CAAD,CAArB,GAA2BA,qBAAqB,CAAC,CAAD,CAAjD,CAAN,GAA8D,EADhE;AAGAE,MAAAA,YAAY,GAAI,GAAEA,YAAa,IAAGF,qBAAqB,CAAC,CAAD,CAAI,GAAEA,qBAAqB,CAAC,CAAD,CAAI,EAAtF;AACA,aAAQ,GAAEE,YAAa,KAAvB;AACD;AACF;;AAEDC,EAAAA,WAAW,GAAG;AACZ,QAAIC,MAAM,CAACC,IAAP,CAAY,KAAKtB,KAAL,CAAWG,OAAvB,EAAgCD,MAAhC,KAA2C,CAA/C,EAAkD;AAChD,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACS,GADT,EAEG,KAAKM,SAAL,CAAe,KAAKR,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBC,SAAxB,CAAkCC,IAAjD,EAAuD,MAAvD,CAFH,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAe,KAAKzB,KAAL,CAAW0B,YAA1B,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACe,GADf,EAEGpB,IAAI,CAACC,KAAL,CAAW,KAAKP,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBC,SAAxB,CAAkCG,WAA7C,CAFH,WANF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACQ,GADR,EAEE;AACE,MAAA,GAAG,EAAG,UAAS,KAAK3B,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBC,SAAxB,CAAkCI,IAAK,EADxD;AAEE,MAAA,GAAG,EAAC,EAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAVF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACa,GADb,EAEGtB,IAAI,CAACC,KAAL,CAAW,KAAKP,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBC,SAAxB,CAAkCK,mBAA7C,CAFH,CAjBF,EAqBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACe,GADf,EAEG,KAAKd,uBAAL,CACC,KAAKf,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBO,KAAxB,CAA8BP,IAA9B,CAAmC,CAAnC,EAAsCQ,UADvC,CAFH,CArBF,EA4BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BA5BF,EA8BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBA9BF,EA+BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKhB,uBAAL,CACC,KAAKf,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,CAApC,EAAuCE,IADxC,CADH,OAII,GAJJ,EAKG,KAAKrB,gBAAL,CACC,KAAKJ,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,CAApC,EAAuCU,iBADxC,CALH,CA/BF,EAwCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKlB,uBAAL,CACC,KAAKf,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,CAApC,EAAuCE,IADxC,CADH,OAKG,KAAKrB,gBAAL,CACC,KAAKJ,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,CAApC,EAAuCU,iBADxC,CALH,CAxCF,EAiDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKlB,uBAAL,CACC,KAAKf,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,CAApC,EAAuCE,IADxC,CADH,OAKG,KAAKrB,gBAAL,CACC,KAAKJ,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,CAApC,EAAuCU,iBADxC,CALH,CAjDF,EA0DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKlB,uBAAL,CACC,KAAKf,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,CAApC,EAAuCE,IADxC,CADH,OAKG,KAAKrB,gBAAL,CACC,KAAKJ,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,CAApC,EAAuCU,iBADxC,CALH,CA1DF,EAmEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKlB,uBAAL,CACC,KAAKf,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,EAApC,EAAwCE,IADzC,CADH,OAKG,KAAKrB,gBAAL,CACC,KAAKJ,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,EAApC,EAAwCU,iBADzC,CALH,CAnEF,EA4EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKlB,uBAAL,CACC,KAAKf,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,EAApC,EAAwCE,IADzC,CADH,OAKG,KAAKrB,gBAAL,CACC,KAAKJ,KAAL,CAAWG,OAAX,CAAmBoB,IAAnB,CAAwBS,MAAxB,CAA+BT,IAA/B,CAAoC,EAApC,EAAwCU,iBADzC,CALH,CA5EF,CADF;AAwFD;;AAEDC,EAAAA,MAAM,GAAG;AACP,WAAO;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+B,KAAKd,WAAL,EAA/B,CAAP;AACD;;AA3K8B;;AA8KjC,MAAMe,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLnC,IAAAA,YAAY,EAAEmC,KAAK,CAACC,YADf;AAELlC,IAAAA,OAAO,EAAEiC,KAAK,CAACjC,OAFV;AAGLuB,IAAAA,YAAY,EAAEU,KAAK,CAACE;AAHf,GAAP;AAKD,CAND;;AAQA,eAAe5C,OAAO,CAACyC,eAAD,EAAkB;AAAExC,EAAAA;AAAF,CAAlB,CAAP,CAA0CE,QAA1C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { weatherData } from '../actions';\nimport { svg } from '../SVG';\n\nclass ListView extends Component {\n  componentDidUpdate(prevState) {\n    if (this.props.searchedItem.length !== 0) {\n      if (this.props.weather === prevState.weather) {\n        this.props.weatherData();\n      }\n    }\n  }\n\n  decimalToPercent(decimal) {\n    return ` ${Math.round(decimal * 100)}%`;\n  }\n\n  //Unix to Day/Date Converter\n  unixToDay(unixTime, typeOfReturn) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n\n    if (typeOfReturn === 'Date') {\n      return `${unixTimeConverter[0]}, ${unixTimeConverter[2]} ${unixTimeConverter[1]}`;\n    } else if (typeOfReturn === 'Day') {\n      switch (unixTimeConverter[0]) {\n        case 'Sun':\n          return 'Sunday';\n        case 'Mon':\n          return 'Monday';\n        case 'Tues':\n          return 'Tuesday';\n        case 'Wed':\n          return 'Wednesday';\n        case 'Thurs':\n          return 'Thursday';\n        case 'Fri':\n          return 'Friday';\n        case 'Sat':\n          return 'Saturday';\n        default:\n          return '';\n      }\n    }\n  }\n\n  // Unix To Standard Time Converter\n  unixToStandardConverter(unixTime) {\n    // UNIX Time to [DayOfWeek, Month, Day, Y, Military Time, Timezone ]\n    let unixTimeConverter = new Date(unixTime * 1000).toString().split(' ');\n\n    // Extract Time From unixTimeConverter variable\n    let militaryTime = unixTimeConverter[4].split(':');\n\n    // Remove the 0s from the end of the military time\n    let militaryTimeShortened = `${militaryTime[0]}:${militaryTime[1]}`;\n\n    // 1. Check if the time is a.m. or p.m.\n    // 2. If a.m., return `military time + a.m`\n    // 3. If p.m., return `(military time - 12) + p.m.`\n\n    if (\n      Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) === 0\n    ) {\n      return `12:${militaryTimeShortened[3]}${militaryTimeShortened[4]} am`;\n    } else if (\n      Number(`${militaryTimeShortened[0]}${militaryTimeShortened[1]}`) < 12\n    ) {\n      return `${militaryTimeShortened} am`;\n    } else {\n      let standardTime =\n        Number(militaryTimeShortened[0] + militaryTimeShortened[1]) - 12;\n\n      standardTime = `${standardTime}:${militaryTimeShortened[3]}${militaryTimeShortened[4]}`;\n      return `${standardTime} pm`;\n    }\n  }\n\n  renderInput() {\n    if (Object.keys(this.props.weather).length === 0) {\n      return <div>Hi there</div>;\n    }\n\n    return (\n      <div>\n        <h3>\n          Today:{' '}\n          {this.unixToDay(this.props.weather.data.currently.time, 'Date')}\n        </h3>\n        <h3>Location: {this.props.locationName}</h3>\n        <h3>\n          Temperature:{' '}\n          {Math.round(this.props.weather.data.currently.temperature)}° F\n        </h3>\n        <h3>\n          Icon:{' '}\n          <img\n            src={`../SVG/${this.props.weather.data.currently.icon}`}\n            alt=\"\"\n          />\n        </h3>\n        <h3>\n          Feels Like{' '}\n          {Math.round(this.props.weather.data.currently.apparentTemperature)}\n        </h3>\n        <h3>\n          Sunset Time:{' '}\n          {this.unixToStandardConverter(\n            this.props.weather.data.daily.data[0].sunsetTime\n          )}\n        </h3>\n\n        <h3>-------------------</h3>\n\n        <h2>Chance of rain</h2>\n        <h3>\n          {this.unixToStandardConverter(\n            this.props.weather.data.hourly.data[2].time\n          )}\n          :{' '}\n          {this.decimalToPercent(\n            this.props.weather.data.hourly.data[2].precipProbability\n          )}\n        </h3>\n        <h3>\n          {this.unixToStandardConverter(\n            this.props.weather.data.hourly.data[4].time\n          )}\n          :\n          {this.decimalToPercent(\n            this.props.weather.data.hourly.data[4].precipProbability\n          )}\n        </h3>\n        <h3>\n          {this.unixToStandardConverter(\n            this.props.weather.data.hourly.data[6].time\n          )}\n          :\n          {this.decimalToPercent(\n            this.props.weather.data.hourly.data[6].precipProbability\n          )}\n        </h3>\n        <h3>\n          {this.unixToStandardConverter(\n            this.props.weather.data.hourly.data[8].time\n          )}\n          :\n          {this.decimalToPercent(\n            this.props.weather.data.hourly.data[8].precipProbability\n          )}\n        </h3>\n        <h3>\n          {this.unixToStandardConverter(\n            this.props.weather.data.hourly.data[10].time\n          )}\n          :\n          {this.decimalToPercent(\n            this.props.weather.data.hourly.data[10].precipProbability\n          )}\n        </h3>\n        <h3>\n          {this.unixToStandardConverter(\n            this.props.weather.data.hourly.data[12].time\n          )}\n          :\n          {this.decimalToPercent(\n            this.props.weather.data.hourly.data[12].precipProbability\n          )}\n        </h3>\n      </div>\n    );\n  }\n\n  render() {\n    return <div className=\"ui container\">{this.renderInput()}</div>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    searchedItem: state.searchPhrase,\n    weather: state.weather,\n    locationName: state.clickedSearch\n  };\n};\n\nexport default connect(mapStateToProps, { weatherData })(ListView);\n"]},"metadata":{},"sourceType":"module"}