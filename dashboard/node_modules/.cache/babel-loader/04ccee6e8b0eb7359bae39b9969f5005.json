{"ast":null,"code":"var _jsxFileName = \"/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/src/components/Searchbar.js\";\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { searchPhrase } from '../actions/index';\nimport { connect } from 'react-redux';\n\nclass SearchBar extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      if (error && touched) {\n        return React.createElement(\"div\", {\n          className: \"ui error message\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"header\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14\n          },\n          __self: this\n        }, error));\n      }\n    };\n\n    this.renderButtonColor = ({\n      error,\n      touched\n    }) => {\n      if (error && touched) {\n        return React.createElement(\"button\", {\n          className: \"ui button red\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, \"Search\");\n      }\n\n      return React.createElement(\"button\", {\n        className: \"ui button green\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, \"Search\");\n    };\n\n    this.renderInput = ({\n      label,\n      input,\n      meta\n    }) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"ui fluid action input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"input\", Object.assign({}, input, {\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      })), this.renderButtonColor(meta)), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, label), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      console.log(formValues.searchFieldSubmission);\n      this.props.searchPhrase(formValues.searchFieldSubmission);\n      this.props.reset();\n    };\n  }\n\n  render() {\n    return React.createElement(\"form\", {\n      onSubmit: this.props.handleSubmit(this.onSubmit),\n      className: \"ui container\",\n      onChange: this.onChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"searchFieldSubmission\",\n      label: \"Zipcode | City Search\",\n      component: this.renderInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst validate = formValues => {\n  const error = {};\n\n  if (!formValues.searchFieldSubmission) {\n    error.searchFieldSubmission = 'Please enter a zipcode or city';\n  }\n\n  return error;\n};\n\nconst formWrapped = reduxForm({\n  form: 'submittedSearch',\n  validate\n})(SearchBar);\nexport default connect(null, {\n  searchPhrase\n})(formWrapped);","map":{"version":3,"sources":["/Users/vincentwnyamu/Documents/CodingPractice/React/weather-dashboard/src/components/Searchbar.js"],"names":["React","Component","Field","reduxForm","searchPhrase","connect","SearchBar","renderError","error","touched","renderButtonColor","renderInput","label","input","meta","onSubmit","formValues","console","log","searchFieldSubmission","props","reset","render","handleSubmit","onChange","validate","formWrapped","form"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { searchPhrase } from '../actions/index';\nimport { connect } from 'react-redux';\n\nclass SearchBar extends Component {\n  //   componentDidUpdate = formValues => {\n  //     console.log(formValues.searchFieldSubmission);\n  //   };\n  renderError = ({ error, touched }) => {\n    if (error && touched) {\n      return (\n        <div className=\"ui error message\">\n          <div className=\"header\">{error}</div>\n        </div>\n      );\n    }\n  };\n\n  renderButtonColor = ({ error, touched }) => {\n    if (error && touched) {\n      return <button className=\"ui button red\">Search</button>;\n    }\n\n    return <button className=\"ui button green\">Search</button>;\n  };\n\n  renderInput = ({ label, input, meta }) => {\n    return (\n      <div>\n        <div className=\"ui fluid action input\">\n          <input {...input} autoComplete=\"off\" />\n          {this.renderButtonColor(meta)}\n        </div>\n        <label>{label}</label>\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  onSubmit = formValues => {\n    console.log(formValues.searchFieldSubmission);\n\n    this.props.searchPhrase(formValues.searchFieldSubmission);\n    this.props.reset();\n  };\n\n  render() {\n    return (\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className=\"ui container\"\n        onChange={this.onChange}\n      >\n        <Field\n          name=\"searchFieldSubmission\"\n          label=\"Zipcode | City Search\"\n          component={this.renderInput}\n        />\n      </form>\n    );\n  }\n}\n\nconst validate = formValues => {\n  const error = {};\n\n  if (!formValues.searchFieldSubmission) {\n    error.searchFieldSubmission = 'Please enter a zipcode or city';\n  }\n\n  return error;\n};\n\nconst formWrapped = reduxForm({\n  form: 'submittedSearch',\n  validate\n})(SearchBar);\n\nexport default connect(null, { searchPhrase })(formWrapped);\n"]},"metadata":{},"sourceType":"module"}